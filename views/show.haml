%a{href: url('/')} return
- res_time = (@log[:res_time] * 1000).round(2)
- sql_time = (@sqls.inject(0) {|t, s| t + s[:duration]} * 1000).round(2)
- sel_count = @sqls.map {|s| s[:sql_text]}.count {|s| s.strip.downcase.start_with?('select')}
- ins_count = @sqls.map {|s| s[:sql_text]}.count {|s| s.strip.downcase.start_with?('insert')}
- upd_count = @sqls.map {|s| s[:sql_text]}.count {|s| s.strip.downcase.start_with?('update')}
- del_count = @sqls.map {|s| s[:sql_text]}.count {|s| s.strip.downcase.start_with?('delete')}

%h2.ui.header summary
%table.ui.celled.very.compact.collapsing.table
  %tbody
    %tr
      %th request id
      %td= @log[:request_id]
    %tr
      %th method
      %td= @log[:method]
    %tr
      %th normalized path
      %td
        %a{href: url("/?normalized_path=#{@log[:normalized_path]}")}= @log[:normalized_path]
    %tr
      %th path
      %td
        %a{href: url("/?path=#{@log[:path]}")}= @log[:path]
    %tr
      %th response time
      %td= "#{res_time}ms"
    %tr
      %th sql time
      %td= "#{sql_time}ms (#{(sql_time / res_time * 100).round(2)}% of response time)"
    %tr
      %th sql count
      %td= "#{@sqls.count} (sel: #{sel_count}, ins: #{ins_count}, upd: #{upd_count}, del: #{del_count})"
    %tr
      %th status
      %td= @log[:status]

%h2.ui.header request header
%pre.ui.segment= @log[:req_header]

%h2.ui.header request body
%pre.ui.segment= @log[:req_body]

%h2.ui.header response header
%pre.ui.segment= @log[:res_header]

%h2.ui.header response body
%pre.ui.segment= @log[:res_body]
%h2.ui.header
  sqls
  .sub.header= "total #{sql_time}ms"
%table.ui.celled.very.compact.table
  %thead
    %tr
      %th no
      %th duration
      %th caller
      %th sql
  %tbody
    - @sqls.each_with_index do |sql, idx|
      %tr
        %td= idx + 1
        %td= (sql[:duration] * 1000).round(3)
        %td= sql[:caller]
        %td
          %a{href: url("/explain/#{sql[:id]}")}= 'explain'
          = sql[:sql_text]
